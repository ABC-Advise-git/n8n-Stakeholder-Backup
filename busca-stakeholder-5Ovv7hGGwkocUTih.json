{"createdAt":"2025-05-30T15:02:48.218Z","updatedAt":"2025-08-12T19:16:40.000Z","id":"5Ovv7hGGwkocUTih","name":"Busca stakeholder","active":false,"isArchived":false,"nodes":[{"parameters":{"inputSource":"passthrough"},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-480,-480],"id":"ade8691a-a152-4794-991a-8a29277b9183","name":"When Executed by Another Workflow"},{"parameters":{"operation":"select","schema":{"__rl":true,"value":"plataforma_stakeholders","mode":"list","cachedResultName":"plataforma_stakeholders"},"table":{"__rl":true,"value":"empresa","mode":"list","cachedResultName":"empresa"},"where":{"values":[{"column":"empresa_id","value":"={{ $json.node_id }}"},{"column":"usuario_id","value":"={{ $json.usuario_id }}"}]},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[220,-500],"id":"420fe5f2-8c50-4d2c-b649-63426de01430","name":"Postgres","executeOnce":true,"credentials":{"postgres":{"id":"YNOTWNzTchEo0E2q","name":"Postgres account"}}},{"parameters":{"url":"https://api.hikerapi.com/gql/user/following/chunk","sendQuery":true,"queryParameters":{"parameters":[{"name":"user_id","value":"={{ $json.output.id_instagram }}{{ $json.user.id }}"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"x-access-key","value":"d8u9mpd3o0d05ikua73r178ie8yn6de1"},{"name":"accept","value":"application/json"}]},"options":{"pagination":{"pagination":{"parameters":{"parameters":[{"name":"end_cursor","value":"={{$response.body[$response.body.length-1]}}"}]},"limitPagesFetched":true,"maxRequests":"={{ $json.output.user_following_count/49 }}{{ $json.user.following_count /49}}"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[900,-380],"id":"4c32feb7-b11f-4386-adce-8d25844303bf","name":"HTTP Request","alwaysOutputData":false,"notesInFlow":false,"executeOnce":true,"onError":"continueRegularOutput"},{"parameters":{"url":"https://api.hikerapi.com/gql/user/followers/chunk","sendQuery":true,"queryParameters":{"parameters":[{"name":"user_id","value":"={{ $json.output.id_instagram }}{{ $json.user.id }}"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"x-access-key","value":"d8u9mpd3o0d05ikua73r178ie8yn6de1"},{"name":"accept","value":"application/json"}]},"options":{"pagination":{"pagination":{"parameters":{"parameters":[{"name":"end_cursor","value":"={{$response.body[$response.body.length-1]}}"}]},"limitPagesFetched":true,"maxRequests":"={{ $json.user.follower_count / 49}}{{  $json.output.user_follower_count/49}}","requestInterval":null}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[900,-580],"id":"c2ea89eb-4111-49c5-be33-84ca4c928d4a","name":"Seguidores1","alwaysOutputData":false,"notesInFlow":false,"executeOnce":false,"onError":"continueRegularOutput"},{"parameters":{"url":"https://api.hikerapi.com/v2/user/by/username","sendQuery":true,"queryParameters":{"parameters":[{"name":"username","value":"={{ $('Postgres').first().json.instagram }}"},{"name":"count","value":"50"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"x-access-key","value":"d8u9mpd3o0d05ikua73r178ie8yn6de1"},{"name":"accept","value":"application/json"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[380,-500],"id":"56b2ce50-4583-4695-8c3d-d72d8308a5af","name":"Busca ID1","onError":"continueErrorOutput"},{"parameters":{"jsCode":"const seguindo = $json.seguindo || [];\nconst seguidores = $json.seguidores || [];\n\n// Junta os dois arrays\nconst todos = [...seguindo, ...seguidores];\n\n// Usado para evitar duplicatas\nconst unicos = new Map();\n\ntodos.forEach(user => {\n  if (user.username && !unicos.has(user.username)) {\n    unicos.set(user.username, {\n      full_name: user.full_name,\n      username: user.username\n    });\n  }\n});\n\nconst usuariosUnicos = Array.from(unicos.values());\nconst batchSize = 1000;\nconst output = [];\n\nfor (let i = 0; i < usuariosUnicos.length; i += batchSize) {\n  const batch = usuariosUnicos.slice(i, i + batchSize);\n  const resultado = batch\n    .map((user, index) => `Perfil ${i + index + 1}: ${user.full_name} (@${user.username})`)\n    .join('\\n');\n\n  output.push({\n    json: {\n      resultado\n    }\n  });\n}\n\nreturn output;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1580,-480],"id":"ac53db76-5d6a-48d1-944e-387c313e5c22","name":"Transforma todos em string para auxiliar o agente1"},{"parameters":{"mode":"combine","combineBy":"combineAll","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[1340,-480],"id":"e311c56f-5733-4d80-8dd9-0f3c8917a5e8","name":"Merge9"},{"parameters":{"jsCode":"const allItems = $input.all();\n\n// Pega apenas os índices pares\nconst seguidoresBrutos = allItems\n  .map(item => item.json)\n  .filter((_, index) => index % 2 === 0); // apenas pares\n\n// Extrai username e full_name\nconst seguidores = [];\n\nseguidoresBrutos.forEach(pagina => {\n  Object.values(pagina).forEach(usuario => {\n    if (usuario.username && usuario.full_name) {\n      seguidores.push({\n        username: usuario.username,\n        full_name: usuario.full_name\n      });\n    }\n  });\n});\n\nreturn [\n  {\n    json: {\n      seguidores\n    }\n  }\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1120,-580],"id":"cfb468ee-fd59-46a0-ada3-14dd937d56b6","name":"Code"},{"parameters":{"jsCode":"const allItems = $input.all();\n\n// Pega apenas os índices pares\nconst seguindoBrutos = allItems\n  .map(item => item.json)\n  .filter((_, index) => index % 2 === 0); // apenas pares\n\n// Extrai username e full_name\nconst seguindo = [];\n\nseguindoBrutos.forEach(pagina => {\n  Object.values(pagina).forEach(usuario => {\n    if (usuario.username && usuario.full_name) {\n      seguindo.push({\n        username: usuario.username,\n        full_name: usuario.full_name\n      });\n    }\n  });\n});\n\nreturn [\n  {\n    json: {\n      seguindo\n    }\n  }\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1120,-375],"id":"55739887-6bee-4204-9401-0118478a701a","name":"Code6"},{"parameters":{"promptType":"define","text":"=Nomes para buscar na lista de perfis: {{ $('When Executed by Another Workflow').all().map(item => `${item.json.nome}, ID ${item.json.id}, tipo: ${item.json.tipo}`).join(', \\n')\n }}\n\nLista de perfis para match:{{ $('Transforma todos em string para auxiliar o agente1').item.json.resultado }}\n\n\n","hasOutputParser":true,"options":{"systemMessage":"Descrição\nVocê é um assistente responsável por validar perfis do Instagram com base em nomes completos fornecidos. Sua função é identificar, com alta confiabilidade, qual perfil corresponde a cada nome completo informado.\n\nObjetivo\nPara cada nome completo com ID informado, analise os perfis disponíveis e retorne apenas o perfil que apresentar evidências fortes de correspondência.\nCaso não seja possível validar com alta confiança, retorne como não encontrado.\n\nEntrada\nVocê receberá:\n\nUm array de nomes completos com o ID entre parênteses. Exemplo:\nANTONIO GUARNIERI (Pessoa: 912)\nANTONIA GUARNIERI (Pessoa: 913)\n\nUm array de perfis do Instagram, com os campos:\nnome, username\n\nCritérios de Validação\nAvalie cada perfil com base nos seguintes critérios (em ordem de prioridade):\n\nCorrespondência exata ou quase exata do nome completo, considerando pequenas variações aceitáveis:\n\nAbreviações compatíveis (ex: João Carlos → João C.)\n\nAusência de um dos nomes do meio (se o restante for idêntico)\n\nCorrespondência de gênero\nEvite associar perfis com nomes de gênero claramente diferente (ex: Antonio ≠ Antonia), mesmo que o sobrenome e o username sejam similares.\n\nCorrespondência entre nome e username\n\nO username deve reforçar a correspondência com o nome.\n\nPenalize similaridades de username quando forem genéricas ou não reforçarem claramente o nome completo (ex: \"guarnieri\" é insuficiente se há várias pessoas com esse sobrenome).\n\nExclusividade e ambiguidade\n\nSe houver mais de um perfil com pontuação próxima e alto risco de ambiguidade, não retorne nenhum.\n\nRegras Especiais\nEvite falsos positivos entre nomes de mesmo sobrenome mas com nomes próprios diferentes, mesmo que similares (ex: ANTONIO GUARNIERI ≠ ANTONIA GUARNIERI)\n\nDê preferência a correspondências com pelo menos dois critérios fortes satisfeitos.\n\nSe restar dúvida significativa, prefira não retornar nenhum perfil.\n\nAo atribuir, coloque no username apenas o nome\nexemplo correto: fulano_123\nexemplo incorreto: @fulano_123"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.9,"position":[2200,-480],"id":"7263269b-0218-45c2-b8d4-fa340e043c04","name":"AI Agent","retryOnFail":true,"maxTries":3,"onError":"continueErrorOutput"},{"parameters":{"modelName":"models/gemini-2.5-flash-preview-05-20","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[2140,-280],"id":"7000ca36-29f1-4472-ace8-074030a5abbe","name":"Google Gemini Chat Model1","credentials":{"googlePalmApi":{"id":"piMVWG8jmLUJuLl1","name":"Google Gemini(PaLM) Api account 2"}}},{"parameters":{"jsonSchemaExample":"{\n  \"encontrados\": {\n    \"pessoas\": [\n      {\n        \"full_name\": \"GENESI DE FATIMA TORMA\",\n        \"username\": \"genesitorma\",\n        \"pessoa_id\": 900,\n        \"justificativa\": \"Nome completo e username altamente compatíveis.\"\n      }\n    ],\n    \"advogados\": [\n      {\n        \"full_name\": \"Joao Claudio Carneiro de Carvalho\",\n        \"username\": \"joaocarvalho__\",\n        \"advogado_id\": 124,\n        \"justificativa\": \"Nome e username condizentes com o perfil profissional.\"\n      }\n    ]\n  },\n  \"nao_encontrados\": {\n    \"pessoas\": [\n      {\n        \"nome\": \"ELIZETE DE FATIMA GUARNIERI\",\n        \"id_banco\": 901\n      }\n    ],\n    \"advogados\": [\n      {\n        \"nome\": \"Advogado Exemplo\",\n        \"id_banco\": 200\n      }\n    ]\n  },\n  \"todos_encontrados\": false\n}\n"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[2420,-280],"id":"02a2d2ff-7a45-4aea-901a-60435758af94","name":"Structured Output Parser"},{"parameters":{"operation":"update","schema":{"__rl":true,"value":"plataforma_stakeholders","mode":"list","cachedResultName":"plataforma_stakeholders"},"table":{"__rl":true,"value":"pessoa","mode":"list","cachedResultName":"pessoa"},"columns":{"mappingMode":"defineBelow","value":{"instagram":"={{ $json.username }}","pessoa_id":"={{ $json.pessoa_id }}","usuario_id":"={{ $('When Executed by Another Workflow').first().json.usuario_id }}"},"matchingColumns":["pessoa_id"],"schema":[{"id":"firstname","displayName":"firstname","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"lastname","displayName":"lastname","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"cpf","displayName":"cpf","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"pessoa_id","displayName":"pessoa_id","required":false,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":false},{"id":"linkedin","displayName":"linkedin","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"instagram","displayName":"instagram","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"stakeholder","displayName":"stakeholder","required":false,"defaultMatch":false,"display":true,"type":"boolean","canBeUsedToMatch":true,"removed":true},{"id":"em_prospecao","displayName":"em_prospecao","required":false,"defaultMatch":false,"display":true,"type":"boolean","canBeUsedToMatch":true,"removed":true},{"id":"sexo","displayName":"sexo","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"data_nascimento","displayName":"data_nascimento","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"nome_mae","displayName":"nome_mae","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"idade","displayName":"idade","required":false,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":true},{"id":"signo","displayName":"signo","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"obito","displayName":"obito","required":false,"defaultMatch":false,"display":true,"type":"boolean","canBeUsedToMatch":true,"removed":true},{"id":"data_obito","displayName":"data_obito","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"renda_estimada","displayName":"renda_estimada","required":false,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":true},{"id":"pep","displayName":"pep","required":false,"defaultMatch":false,"display":true,"type":"boolean","canBeUsedToMatch":true,"removed":true},{"id":"projeto_id","displayName":"projeto_id","required":false,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":true},{"id":"associado","displayName":"associado","required":false,"defaultMatch":false,"display":true,"type":"boolean","canBeUsedToMatch":true,"removed":true},{"id":"usuario_id","displayName":"usuario_id","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[4340,-700],"id":"c7e8ac97-7352-4e23-aea2-f4aa7a95d168","name":"Postgres2","credentials":{"postgres":{"id":"YNOTWNzTchEo0E2q","name":"Postgres account"}}},{"parameters":{"jsCode":"// Inicializa os conjuntos para evitar duplicatas\nconst pessoasEncontradas = new Map();\nconst advogadosEncontrados = new Map();\nconst pessoasNaoEncontradas = new Map();\nconst advogadosNaoEncontrados = new Map();\n\n// Percorre cada batch de resultados\nfor (const item of items) {\n  const output = item.json.output;\n\n  // Adiciona encontrados - pessoas\n  const pessoasEncontradasArray = output?.encontrados?.pessoas || [];\n  for (const pessoa of pessoasEncontradasArray) {\n    if (!pessoasEncontradas.has(pessoa.pessoa_id)) {\n      pessoasEncontradas.set(pessoa.pessoa_id, pessoa);\n    }\n  }\n\n  // Adiciona encontrados - advogados\n  const advogadosEncontradosArray = output?.encontrados?.advogados || [];\n  for (const advogado of advogadosEncontradosArray) {\n    if (!advogadosEncontrados.has(advogado.advogado_id)) {\n      advogadosEncontrados.set(advogado.advogado_id, advogado);\n    }\n  }\n\n  // Adiciona não encontrados - pessoas (se não está em encontrados)\n  const pessoasNaoEncontradasArray = output?.nao_encontrados?.pessoas || [];\n  for (const pessoa of pessoasNaoEncontradasArray) {\n    if (\n      !pessoasEncontradas.has(pessoa.id_banco) &&\n      !pessoasNaoEncontradas.has(pessoa.id_banco)\n    ) {\n      pessoasNaoEncontradas.set(pessoa.id_banco, pessoa);\n    }\n  }\n\n  // Adiciona não encontrados - advogados (se não está em encontrados)\n  const advogadosNaoEncontradosArray = output?.nao_encontrados?.advogados || [];\n  for (const advogado of advogadosNaoEncontradosArray) {\n    if (\n      !advogadosEncontrados.has(advogado.id_banco) &&\n      !advogadosNaoEncontrados.has(advogado.id_banco)\n    ) {\n      advogadosNaoEncontrados.set(advogado.id_banco, advogado);\n    }\n  }\n}\n\n// Estrutura final consolidada\nconst todosEncontrados = \n  pessoasNaoEncontradas.size === 0 && \n  advogadosNaoEncontrados.size === 0;\n\nreturn [\n  {\n    json: {\n      encontrados: {\n        pessoas: Array.from(pessoasEncontradas.values()),\n        advogados: Array.from(advogadosEncontrados.values()),\n      },\n      nao_encontrados: {\n        pessoas: Array.from(pessoasNaoEncontradas.values()),\n        advogados: Array.from(advogadosNaoEncontrados.values()),\n      },\n      todos_encontrados: todosEncontrados\n    }\n  }\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2580,-500],"id":"e4c9b9a1-1ed7-4228-af93-4e55c7a465b2","name":"Code4"},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[5580,-540],"id":"ce737673-477b-4a6e-9da8-c23e7458f48d","name":"Merge1"},{"parameters":{"jsCode":"const output = [];\n\nfor (const item of $input.all()) {\n  const encontrados = item.json.encontrados.pessoas;\n  \n  if (Array.isArray(encontrados) && encontrados.length > 0) {\n    for (const encontrado of encontrados) {\n      output.push({ json: encontrado });\n    }\n  }\n}\n\nreturn output;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3900,-700],"id":"49749147-03bb-499b-86d8-1e6c07078879","name":"Pessoas Encontradas"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"5c14f99d-d686-46d8-9bce-ddc66c4c916f","leftValue":"={{ $json.encontrados.pessoas }}","rightValue":"","operator":{"type":"array","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"looseTypeValidation":true,"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[3620,-620],"id":"da59af67-864d-4261-94df-08ea35f9c37a","name":"If1"},{"parameters":{"workflowId":{"__rl":true,"value":"htJrGGnFki6e8luR","mode":"list","cachedResultName":"Busca Advogados"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"mode":"each","options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[4800,-300],"id":"ce18a9ea-308b-42fa-ad08-ebe71e84a6ad","name":"Execute Workflow","executeOnce":false},{"parameters":{"workflowId":{"__rl":true,"value":"USio4uRJbqJe9oSR","mode":"list","cachedResultName":"postStatus"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":false}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[-140,-760],"id":"f980e7bd-2acc-482f-b6f0-57814e74cc98","name":"Execute Workflow1","executeOnce":true},{"parameters":{"assignments":{"assignments":[{"id":"03ab924a-7eaa-4fe7-9397-e79fcc0265bf","name":"status","value":"=Buscando instagram de {{ $('When Executed by Another Workflow').all().length }} entidades relacionadas no perfil do stakeholder. Vou buscar os seguidores e seguindo, esse processo deve demorar um pouco.","type":"string"},{"id":"899bda1b-621c-41fd-ad86-38f6b08bbaec","name":"body.node_id","value":"={{ $json.node_id }}","type":"string"},{"id":"738f1f04-bb75-42e8-8134-80196fc39b4d","name":"body.node_type","value":"=Empresa","type":"string"},{"id":"4031e49f-7925-4c83-9fb1-65d8e1ee130c","name":"usuario_id","value":"={{ $json.usuario_id }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-240,-760],"id":"03964cc5-d523-43dc-8772-677ad6494508","name":"Status finalizado"},{"parameters":{"mode":"chooseBranch","useDataOfInput":2},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[60,-500],"id":"3e90ef1d-8158-43c4-876b-2f55ec8bba04","name":"Merge"},{"parameters":{"workflowId":{"__rl":true,"value":"USio4uRJbqJe9oSR","mode":"list","cachedResultName":"postStatus"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":false}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1840,-740],"id":"a113b04e-41b8-445f-a3f9-725e9e793733","name":"Execute Workflow2","executeOnce":true},{"parameters":{"assignments":{"assignments":[{"id":"03ab924a-7eaa-4fe7-9397-e79fcc0265bf","name":"status","value":"=Encontrado aproximadamente {{ $('Transforma todos em string para auxiliar o agente1').all().length * 1000}} perfis para comparar. O agente vai decidir quais os perfis encontrou.","type":"string"},{"id":"899bda1b-621c-41fd-ad86-38f6b08bbaec","name":"body.node_id","value":"={{ $('When Executed by Another Workflow').first().json.node_id}}","type":"string"},{"id":"738f1f04-bb75-42e8-8134-80196fc39b4d","name":"body.node_type","value":"=Empresa","type":"string"},{"id":"22e00e93-2799-4a5d-86e0-0d8faddc086b","name":"usuario_id","value":"={{ $('When Executed by Another Workflow').first().json.usuario_id }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1740,-740],"id":"37f3c198-afc1-4ca9-9f2b-e982b707fd5b","name":"Status finalizado1"},{"parameters":{"mode":"chooseBranch","useDataOfInput":2},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[2020,-480],"id":"0233569f-54e4-4462-bacd-710bfcf27431","name":"Merge2"},{"parameters":{"workflowId":{"__rl":true,"value":"USio4uRJbqJe9oSR","mode":"list","cachedResultName":"postStatus"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":false}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2900,-620],"id":"f71e5dfe-6df6-4ec0-9137-6445534e3b46","name":"Execute Workflow3","executeOnce":true},{"parameters":{"assignments":{"assignments":[{"id":"03ab924a-7eaa-4fe7-9397-e79fcc0265bf","name":"status","value":"=Encontrado instagram das seguintes pessoas:\n{{ $('Code4').item.json.encontrados.pessoas.map(pessoa => `${pessoa.full_name}, username:  ${pessoa.username} \nJustificativa: ${pessoa.justificativa}`).join('\\n\\n') }}","type":"string"},{"id":"899bda1b-621c-41fd-ad86-38f6b08bbaec","name":"body.node_id","value":"={{ $('When Executed by Another Workflow').first().json.node_id}}","type":"string"},{"id":"738f1f04-bb75-42e8-8134-80196fc39b4d","name":"body.node_type","value":"=Empresa","type":"string"},{"id":"e47b6113-b547-417f-86e2-fbfe7ad6a13f","name":"usuario_id","value":"={{ $('When Executed by Another Workflow').first().json.usuario_id }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2800,-620],"id":"7b5e5342-0e0f-4d65-8acd-8bc0a04a3eaa","name":"Status finalizado2"},{"parameters":{"mode":"chooseBranch","useDataOfInput":2},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[3120,-520],"id":"c0b68719-b5f0-41a0-889a-0ad2617720e9","name":"Merge3"},{"parameters":{"workflowId":{"__rl":true,"value":"USio4uRJbqJe9oSR","mode":"list","cachedResultName":"postStatus"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":false}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[5960,-560],"id":"20d31dae-a822-4265-bfd2-387586038bc6","name":"Execute Workflow4","executeOnce":true},{"parameters":{"assignments":{"assignments":[{"id":"03ab924a-7eaa-4fe7-9397-e79fcc0265bf","name":"status","value":"=Finalizei a busca no stakeholder. Caso queira faça a busca profunda.","type":"string"},{"id":"899bda1b-621c-41fd-ad86-38f6b08bbaec","name":"body.node_id","value":"={{ $('When Executed by Another Workflow').first().json.node_id}}","type":"string"},{"id":"738f1f04-bb75-42e8-8134-80196fc39b4d","name":"body.node_type","value":"=Empresa","type":"string"},{"id":"b3262603-c62e-401b-b908-448a0a948ffb","name":"usuario_id","value":"={{ $('When Executed by Another Workflow').first().json.usuario_id }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[5840,-560],"id":"f4a8b61a-e975-45c6-9c14-eae325aeeef5","name":"Status finalizado3"},{"parameters":{"jsCode":"// Passo 1: Captura todos os itens do nó de gatilho.\nconst allWorkflowItems = $('When Executed by Another Workflow').all();\n\n// Passo 2: Extrai o objeto JSON de cada item para criar um array de dados.\nconst dataArray = allWorkflowItems.map(item => item.json);\n\n// Passo 3: Filtra o array para obter apenas os objetos cujo tipo é 'Advogado'.\nconst advogados = dataArray.filter(item => item.tipo === 'Advogado');\n\n// Passo 4 (CORRIGIDO): Retorna cada advogado como um item separado.\n// O .map() cria um novo array onde cada elemento é um \"item de workflow\" válido,\n// pois o 'json' de cada um aponta para um único objeto de advogado.\nreturn advogados.map(advogado => {\n  return {\n    json: advogado\n  };\n});"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3740,-320],"id":"5ce42c8c-0ffe-427d-88d5-c03554cfb8a5","name":"Code2"},{"parameters":{"mode":"combine","combineBy":"combineAll","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[4200,-300],"id":"b69d92db-448c-4467-8ca1-3966249a246d","name":"Merge4"},{"parameters":{"assignments":{"assignments":[{"id":"50a42eb2-7239-40f4-a3e8-44f494384107","name":"usuario_id","value":"={{ $('When Executed by Another Workflow').first().json.usuario_id }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[3940,-220],"id":"d6541902-1050-4e79-888b-3cefc62e2b0f","name":"Edit Fields"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d0f1f635-0a9f-44a1-a85f-0ec171422fb5","leftValue":"={{ $json.user.follower_count }}","rightValue":20000,"operator":{"type":"number","operation":"lt"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[600,-560],"id":"5f7481db-49de-460f-9017-4d1e5db2d522","name":"If"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d0f1f635-0a9f-44a1-a85f-0ec171422fb5","leftValue":"={{ $json.user.following_count }}","rightValue":20000,"operator":{"type":"number","operation":"lt"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[600,-380],"id":"119cd8a6-d059-4a43-a4bc-d470b19d5a24","name":"If2"},{"parameters":{"compare":"selectedFields","fieldsToCompare":"id","options":{}},"type":"n8n-nodes-base.removeDuplicates","typeVersion":2,"position":[4420,-300],"id":"dda3a91d-d4cf-4345-a2f7-f5f79da7a123","name":"Remove Duplicates"}],"connections":{"When Executed by Another Workflow":{"main":[[{"node":"Status finalizado","type":"main","index":0},{"node":"Merge","type":"main","index":1}]]},"Postgres":{"main":[[{"node":"Busca ID1","type":"main","index":0}]]},"Busca ID1":{"main":[[{"node":"If","type":"main","index":0},{"node":"If2","type":"main","index":0}]]},"Merge9":{"main":[[{"node":"Transforma todos em string para auxiliar o agente1","type":"main","index":0}]]},"Code":{"main":[[{"node":"Merge9","type":"main","index":0}]]},"Code6":{"main":[[{"node":"Merge9","type":"main","index":1}]]},"Seguidores1":{"main":[[{"node":"Code","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"Code6","type":"main","index":0}]]},"Transforma todos em string para auxiliar o agente1":{"main":[[{"node":"Status finalizado1","type":"main","index":0},{"node":"Merge2","type":"main","index":1}]]},"Structured Output Parser":{"ai_outputParser":[[{"node":"AI Agent","type":"ai_outputParser","index":0}]]},"Google Gemini Chat Model1":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"AI Agent":{"main":[[{"node":"Code4","type":"main","index":0}]]},"Code4":{"main":[[{"node":"Merge3","type":"main","index":1},{"node":"Status finalizado2","type":"main","index":0}]]},"Postgres2":{"main":[[{"node":"Merge1","type":"main","index":0}]]},"Merge1":{"main":[[{"node":"Status finalizado3","type":"main","index":0}]]},"Pessoas Encontradas":{"main":[[{"node":"Postgres2","type":"main","index":0}]]},"If1":{"main":[[{"node":"Pessoas Encontradas","type":"main","index":0}],[{"node":"Merge1","type":"main","index":0}]]},"Execute Workflow":{"main":[[{"node":"Merge1","type":"main","index":1}]]},"Status finalizado":{"main":[[{"node":"Execute Workflow1","type":"main","index":0}]]},"Merge":{"main":[[{"node":"Postgres","type":"main","index":0}]]},"Execute Workflow1":{"main":[[{"node":"Merge","type":"main","index":0}]]},"Execute Workflow2":{"main":[[{"node":"Merge2","type":"main","index":0}]]},"Status finalizado1":{"main":[[{"node":"Execute Workflow2","type":"main","index":0}]]},"Merge2":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"Execute Workflow3":{"main":[[{"node":"Merge3","type":"main","index":0}]]},"Status finalizado2":{"main":[[{"node":"Execute Workflow3","type":"main","index":0}]]},"Merge3":{"main":[[{"node":"If1","type":"main","index":0},{"node":"Code2","type":"main","index":0}]]},"Status finalizado3":{"main":[[{"node":"Execute Workflow4","type":"main","index":0}]]},"Code2":{"main":[[{"node":"Merge4","type":"main","index":0},{"node":"Edit Fields","type":"main","index":0}]]},"Merge4":{"main":[[{"node":"Remove Duplicates","type":"main","index":0}]]},"Edit Fields":{"main":[[{"node":"Merge4","type":"main","index":1}]]},"If":{"main":[[{"node":"Seguidores1","type":"main","index":0}]]},"If2":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"Remove Duplicates":{"main":[[{"node":"Execute Workflow","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"dbee8606-74ea-4aea-9217-ccf09d908af1","triggerCount":0,"tags":[]}