{"createdAt":"2025-05-30T11:43:55.518Z","updatedAt":"2025-06-24T11:19:47.000Z","id":"ze0Qh7d4CZLhFa2x","name":"Busca Profunda","active":false,"isArchived":false,"nodes":[{"parameters":{"url":"https://api.hikerapi.com/gql/user/following/chunk","sendQuery":true,"queryParameters":{"parameters":[{"name":"user_id","value":"={{ $json.output.id_instagram }}{{ $json.user.id }}"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"x-access-key","value":"d8u9mpd3o0d05ikua73r178ie8yn6de1"},{"name":"accept","value":"application/json"}]},"options":{"pagination":{"pagination":{"parameters":{"parameters":[{"name":"end_cursor","value":"={{$response.body[$response.body.length-1]}}"}]},"limitPagesFetched":true,"maxRequests":"={{ $json.output.user_following_count/49 }}{{ $json.user.following_count /49}}"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-840,60],"id":"6f350c76-0a14-4b66-9b00-6ad0ecd68656","name":"HTTP Request","alwaysOutputData":false,"notesInFlow":false,"executeOnce":true,"retryOnFail":true,"onError":"continueRegularOutput"},{"parameters":{"url":"https://api.hikerapi.com/gql/user/followers/chunk","sendQuery":true,"queryParameters":{"parameters":[{"name":"user_id","value":"={{ $json.output.id_instagram }}{{ $json.user.id }}"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"x-access-key","value":"d8u9mpd3o0d05ikua73r178ie8yn6de1"},{"name":"accept","value":"application/json"}]},"options":{"pagination":{"pagination":{"parameters":{"parameters":[{"name":"end_cursor","value":"={{$response.body[$response.body.length-1]}}"}]},"limitPagesFetched":true,"maxRequests":"={{ $json.user.follower_count / 49}}{{  $json.output.user_follower_count/49}}","requestInterval":null}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-840,-140],"id":"847e5c6e-1ba3-4678-9670-f13e530f7ada","name":"Seguidores1","alwaysOutputData":false,"notesInFlow":false,"executeOnce":false,"retryOnFail":true,"onError":"continueRegularOutput"},{"parameters":{"url":"https://api.hikerapi.com/v2/user/by/username","sendQuery":true,"queryParameters":{"parameters":[{"name":"username","value":"={{ $json.instagram }}"},{"name":"count","value":"50"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"x-access-key","value":"d8u9mpd3o0d05ikua73r178ie8yn6de1"},{"name":"accept","value":"application/json"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1720,-20],"id":"142231bc-0239-44b4-8349-0244ebf2179c","name":"Busca ID1"},{"parameters":{"jsCode":"const seguindo = $json.seguindo || [];\nconst seguidores = $json.seguidores || [];\n\n// Junta os dois arrays\nconst todos = [...seguindo, ...seguidores];\n\n// Usado para evitar duplicatas\nconst unicos = new Map();\n\ntodos.forEach(user => {\n  if (user.username && !unicos.has(user.username)) {\n    unicos.set(user.username, {\n      full_name: user.full_name,\n      username: user.username\n    });\n  }\n});\n\nconst usuariosUnicos = Array.from(unicos.values());\nconst batchSize = 1000;\nconst output = [];\n\nfor (let i = 0; i < usuariosUnicos.length; i += batchSize) {\n  const batch = usuariosUnicos.slice(i, i + batchSize);\n  const resultado = batch\n    .map((user, index) => `Perfil ${i + index + 1}: ${user.full_name} (@${user.username})`)\n    .join('\\n');\n\n  output.push({\n    json: {\n      resultado\n    }\n  });\n}\n\nreturn output;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-20,-40],"id":"a0e855a3-cc44-4410-883c-de83863a2c5c","name":"Transforma todos em string para auxiliar o agente1"},{"parameters":{"mode":"combine","combineBy":"combineAll","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[-180,-40],"id":"82782949-01e8-4453-a464-d6f39b61fa0c","name":"Merge9"},{"parameters":{"jsCode":"const allItems = $input.all();\n\n// Pega apenas os índices pares\nconst seguidoresBrutos = allItems\n  .map(item => item.json)\n  .filter((_, index) => index % 2 === 0); // apenas pares\n\n// Extrai username e full_name\nconst seguidores = [];\n\nseguidoresBrutos.forEach(pagina => {\n  Object.values(pagina).forEach(usuario => {\n    if (usuario.username && usuario.full_name) {\n      seguidores.push({\n        username: usuario.username,\n        full_name: usuario.full_name\n      });\n    }\n  });\n});\n\nreturn [\n  {\n    json: {\n      seguidores\n    }\n  }\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-400,-140],"id":"0f52d628-bdee-4d42-96bd-efde6d277645","name":"Code"},{"parameters":{"jsCode":"const allItems = $input.all();\n\n// Pega apenas os índices pares\nconst seguindoBrutos = allItems\n  .map(item => item.json)\n  .filter((_, index) => index % 2 === 0); // apenas pares\n\n// Extrai username e full_name\nconst seguindo = [];\n\nseguindoBrutos.forEach(pagina => {\n  Object.values(pagina).forEach(usuario => {\n    if (usuario.username && usuario.full_name) {\n      seguindo.push({\n        username: usuario.username,\n        full_name: usuario.full_name\n      });\n    }\n  });\n});\n\nreturn [\n  {\n    json: {\n      seguindo\n    }\n  }\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-620,60],"id":"d6211553-1aaa-4f12-8762-d38b447d050c","name":"Code6"},{"parameters":{"promptType":"define","text":"=Nomes para buscar na lista de perfis: {{ $('Postgres1').all().map(item => `${item.json.nome}, ID ${item.json.id}, tipo: ${item.json.tipo}`).join(', \\n')\n }}\nLista de perfis para match:{{ $json.resultado }}\n\n\n","hasOutputParser":true,"options":{"systemMessage":"Descrição\nVocê é um assistente responsável por validar perfis do Instagram com base em nomes completos fornecidos. Sua função é identificar, com alta confiabilidade, qual perfil corresponde a cada nome completo informado.\n\nObjetivo\nPara cada nome completo com ID informado, analise os perfis disponíveis e retorne apenas o perfil que apresentar evidências fortes de correspondência.\nCaso não seja possível validar com alta confiança, retorne como não encontrado.\n\nEntrada\nVocê receberá:\n\nUm array de nomes completos com o ID entre parênteses. Exemplo:\nANTONIO GUARNIERI (Pessoa: 912)\nANTONIA GUARNIERI (Pessoa: 913)\n\nUm array de perfis do Instagram, com os campos:\nnome, username\n\nCritérios de Validação\nAvalie cada perfil com base nos seguintes critérios (em ordem de prioridade):\n\nCorrespondência exata ou quase exata do nome completo, considerando pequenas variações aceitáveis:\n\nAbreviações compatíveis (ex: João Carlos → João C.)\n\nAusência de um dos nomes do meio (se o restante for idêntico)\n\nCorrespondência de gênero\nEvite associar perfis com nomes de gênero claramente diferente (ex: Antonio ≠ Antonia), mesmo que o sobrenome e o username sejam similares.\n\nCorrespondência entre nome e username\n\nO username deve reforçar a correspondência com o nome.\n\nPenalize similaridades de username quando forem genéricas ou não reforçarem claramente o nome completo (ex: \"guarnieri\" é insuficiente se há várias pessoas com esse sobrenome).\n\nExclusividade e ambiguidade\n\nSe houver mais de um perfil com pontuação próxima e alto risco de ambiguidade, não retorne nenhum.\n\nRegras Especiais\nEvite falsos positivos entre nomes de mesmo sobrenome mas com nomes próprios diferentes, mesmo que similares (ex: ANTONIO GUARNIERI ≠ ANTONIA GUARNIERI)\n\nDê preferência a correspondências com pelo menos dois critérios fortes satisfeitos.\n\nSe restar dúvida significativa, prefira não retornar nenhum perfil."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.9,"position":[660,-40],"id":"1cb8c382-9fae-4bc7-b0de-d438392a6d5e","name":"AI Agent","retryOnFail":false,"maxTries":2,"onError":"continueErrorOutput"},{"parameters":{"modelName":"models/gemini-2.5-flash-preview-05-20","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[560,160],"id":"c77cb2e8-ecca-485f-84d4-d224bd31573b","name":"Google Gemini Chat Model1","credentials":{"googlePalmApi":{"id":"piMVWG8jmLUJuLl1","name":"Google Gemini(PaLM) Api account 2"}}},{"parameters":{"jsonSchemaExample":"{\n  \"encontrados\": {\n    \"pessoas\": [\n      {\n        \"full_name\": \"GENESI DE FATIMA TORMA\",\n        \"username\": \"genesitorma\",\n        \"pessoa_id\": 900,\n        \"justificativa\": \"Nome completo e username altamente compatíveis.\"\n      }\n    ],\n    \"advogados\": [\n      {\n        \"full_name\": \"Joao Claudio Carneiro de Carvalho\",\n        \"username\": \"joaocarvalho__\",\n        \"advogado_id\": 124,\n        \"justificativa\": \"Nome e username condizentes com o perfil profissional.\"\n      }\n    ]\n  },\n  \"nao_encontrados\": {\n    \"pessoas\": [\n      {\n        \"nome\": \"ELIZETE DE FATIMA GUARNIERI\",\n        \"id_banco\": 901\n      }\n    ],\n    \"advogados\": [\n      {\n        \"nome\": \"Advogado Exemplo\",\n        \"id_banco\": 200\n      }\n    ]\n  },\n  \"todos_encontrados\": false\n}\n"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[880,160],"id":"74cbc7c6-171c-46f5-a398-262b861aa2fa","name":"Structured Output Parser"},{"parameters":{"operation":"update","schema":{"__rl":true,"value":"plataforma_stakeholders","mode":"list","cachedResultName":"plataforma_stakeholders"},"table":{"__rl":true,"value":"pessoa","mode":"list","cachedResultName":"pessoa"},"columns":{"mappingMode":"defineBelow","value":{"instagram":"={{ $json.username }}","pessoa_id":"={{ $json.pessoa_id }}"},"matchingColumns":["pessoa_id"],"schema":[{"id":"firstname","displayName":"firstname","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"lastname","displayName":"lastname","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"cpf","displayName":"cpf","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"pessoa_id","displayName":"pessoa_id","required":false,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":false},{"id":"linkedin","displayName":"linkedin","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"instagram","displayName":"instagram","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"stakeholder","displayName":"stakeholder","required":false,"defaultMatch":false,"display":true,"type":"boolean","canBeUsedToMatch":true,"removed":true},{"id":"em_prospecao","displayName":"em_prospecao","required":false,"defaultMatch":false,"display":true,"type":"boolean","canBeUsedToMatch":true,"removed":true},{"id":"sexo","displayName":"sexo","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"data_nascimento","displayName":"data_nascimento","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"nome_mae","displayName":"nome_mae","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"idade","displayName":"idade","required":false,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":true},{"id":"signo","displayName":"signo","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"obito","displayName":"obito","required":false,"defaultMatch":false,"display":true,"type":"boolean","canBeUsedToMatch":true,"removed":true},{"id":"data_obito","displayName":"data_obito","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"renda_estimada","displayName":"renda_estimada","required":false,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":true},{"id":"pep","displayName":"pep","required":false,"defaultMatch":false,"display":true,"type":"boolean","canBeUsedToMatch":true,"removed":true},{"id":"projeto_id","displayName":"projeto_id","required":false,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":true},{"id":"associado","displayName":"associado","required":false,"defaultMatch":false,"display":true,"type":"boolean","canBeUsedToMatch":true,"removed":true}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2080,-260],"id":"c9bcbe75-2aff-4bfc-8792-ef8def0f74ca","name":"Postgres2","credentials":{"postgres":{"id":"YNOTWNzTchEo0E2q","name":"Postgres account"}}},{"parameters":{"jsCode":"// Inicializa os conjuntos para evitar duplicatas\nconst pessoasEncontradas = new Map();\nconst advogadosEncontrados = new Map();\nconst pessoasNaoEncontradas = new Map();\nconst advogadosNaoEncontrados = new Map();\n\n// Percorre cada batch de resultados\nfor (const item of items) {\n  const output = item.json.output;\n\n  // Adiciona encontrados - pessoas\n  for (const pessoa of output.encontrados.pessoas || []) {\n    if (!pessoasEncontradas.has(pessoa.pessoa_id)) {\n      pessoasEncontradas.set(pessoa.pessoa_id, pessoa);\n    }\n  }\n\n  // Adiciona encontrados - advogados\n  for (const advogado of output.encontrados.advogados || []) {\n    if (!advogadosEncontrados.has(advogado.advogado_id)) {\n      advogadosEncontrados.set(advogado.advogado_id, advogado);\n    }\n  }\n\n  // Adiciona não encontrados - pessoas (se não está em encontrados)\n  for (const pessoa of output.nao_encontrados.pessoas || []) {\n    if (\n      !pessoasEncontradas.has(pessoa.id_banco) &&\n      !pessoasNaoEncontradas.has(pessoa.id_banco)\n    ) {\n      pessoasNaoEncontradas.set(pessoa.id_banco, pessoa);\n    }\n  }\n\n  // Adiciona não encontrados - advogados (se não está em encontrados)\n  for (const advogado of output.nao_encontrados.advogados || []) {\n    if (\n      !advogadosEncontrados.has(advogado.id_banco) &&\n      !advogadosNaoEncontrados.has(advogado.id_banco)\n    ) {\n      advogadosNaoEncontrados.set(advogado.id_banco, advogado);\n    }\n  }\n}\n\n// Estrutura final consolidada\nconst todosEncontrados = \n  pessoasNaoEncontradas.size === 0 && \n  advogadosNaoEncontrados.size === 0;\n\nreturn [\n  {\n    json: {\n      encontrados: {\n        pessoas: Array.from(pessoasEncontradas.values()),\n        advogados: Array.from(advogadosEncontrados.values()),\n      },\n      nao_encontrados: {\n        pessoas: Array.from(pessoasNaoEncontradas.values()),\n        advogados: Array.from(advogadosNaoEncontrados.values()),\n      },\n      todos_encontrados: todosEncontrados\n    }\n  }\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1080,-60],"id":"eef1494f-f80a-4433-ad56-bfcad456c644","name":"Code4"},{"parameters":{"mode":"chooseBranch","useDataOfInput":2},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[2340,-100],"id":"c772db4c-4cff-4afb-a80e-f2b0c76ff6cc","name":"Merge1"},{"parameters":{"jsCode":"const output = [];\n\nfor (const item of $input.all()) {\n  const encontrados = item.json.encontrados.pessoas;\n  \n  if (Array.isArray(encontrados) && encontrados.length > 0) {\n    for (const encontrado of encontrados) {\n      output.push({ json: encontrado });\n    }\n  }\n}\n\nreturn output;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1860,-260],"id":"5b65e8b7-6eec-4a24-85bf-6d6f8f16f33c","name":"Pessoas Encontradas"},{"parameters":{"jsCode":"const output = [];\n\nfor (const item of $input.all()) {\n  const encontrados = item.json.encontrados.advogados;\n  \n  if (Array.isArray(encontrados) && encontrados.length > 0) {\n    for (const encontrado of encontrados) {\n      output.push({ json: encontrado });\n    }\n  }\n}\n\nreturn output;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1880,40],"id":"a58f2cf5-f64c-447d-8920-188f2e674843","name":"Advogados encontrados","alwaysOutputData":true},{"parameters":{"operation":"update","schema":{"__rl":true,"value":"plataforma_stakeholders","mode":"list","cachedResultName":"plataforma_stakeholders"},"table":{"__rl":true,"value":"advogado","mode":"list","cachedResultName":"advogado"},"columns":{"mappingMode":"defineBelow","value":{"advogado_id":"={{ $json.advogado_id }}","instagram":"={{ $json.username }}"},"matchingColumns":["advogado_id"],"schema":[{"id":"firstname","displayName":"firstname","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"lastname","displayName":"lastname","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"oab","displayName":"oab","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"advogado_id","displayName":"advogado_id","required":false,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":false},{"id":"linkedin","displayName":"linkedin","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"instagram","displayName":"instagram","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"cpf","displayName":"cpf","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"stakeholder","displayName":"stakeholder","required":false,"defaultMatch":false,"display":true,"type":"boolean","canBeUsedToMatch":true,"removed":true}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2100,40],"id":"cc767080-c6b6-4ebf-85f6-63cfd493821a","name":"Postgre Advogado","credentials":{"postgres":{"id":"YNOTWNzTchEo0E2q","name":"Postgres account"}},"onError":"continueRegularOutput"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"5c14f99d-d686-46d8-9bce-ddc66c4c916f","leftValue":"={{ $json.encontrados.advogados }}","rightValue":"","operator":{"type":"array","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"looseTypeValidation":true,"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1680,120],"id":"5c59376a-2cfb-4c56-8649-0f5b4d012db1","name":"If"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"5c14f99d-d686-46d8-9bce-ddc66c4c916f","leftValue":"={{ $json.encontrados.pessoas }}","rightValue":"","operator":{"type":"array","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"looseTypeValidation":true,"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1680,-180],"id":"22af02bd-29b9-4777-bd19-2d15782e432a","name":"If1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"0a19d961-5816-4d44-9f16-a9b0a54e9658","leftValue":"={{ $json.instagram }}","rightValue":"","operator":{"type":"string","operation":"exists","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-2420,20],"id":"07cf0327-a051-4245-a896-c89a14f75370","name":"If2"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"a2614b1a-4104-4bbc-93fb-42ee4952548c","leftValue":"={{ $json.user.is_private }}","rightValue":"","operator":{"type":"boolean","operation":"false","singleValue":true}}],"combinator":"and"},"looseTypeValidation":true,"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-1480,-20],"id":"24e7d85d-a03e-4828-8f8d-cdd8858dea27","name":"If3"},{"parameters":{"inputSource":"passthrough"},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-3520,20],"id":"cc2c9626-4b61-4c94-a48a-4ef99254007d","name":"When Executed by Another Workflow"},{"parameters":{"operation":"executeQuery","query":"WITH socios_primarios AS (\n    -- Pessoas e advogados diretamente relacionados à empresa inicial\n    SELECT \n        r.entidade_destino_id AS pessoa_id,\n        r.tipo_destino_id AS tipo\n    FROM plataforma_stakeholders.relacionamentos r\n    WHERE r.entidade_origem_id = {{ $json.body.node_id }} AND r.tipo_origem_id = 3\n      AND r.tipo_destino_id IN (1, 4)\n\n    UNION\n\n    SELECT \n        r.entidade_origem_id AS pessoa_id,\n        r.tipo_origem_id AS tipo\n    FROM plataforma_stakeholders.relacionamentos r\n    WHERE r.entidade_destino_id = {{ $json.body.node_id }} AND r.tipo_destino_id = 3\n      AND r.tipo_origem_id IN (1, 4)\n),\nempresas_secundarias AS (\n    -- Empresas onde os sócios primários (pessoas) participam\n    SELECT \n        r.entidade_destino_id AS empresa_id\n    FROM plataforma_stakeholders.relacionamentos r\n    JOIN socios_primarios s ON r.entidade_origem_id = s.pessoa_id AND r.tipo_origem_id = 1 AND s.tipo = 1\n    WHERE r.tipo_destino_id = 3\n\n    UNION\n\n    SELECT \n        r.entidade_origem_id AS empresa_id\n    FROM plataforma_stakeholders.relacionamentos r\n    JOIN socios_primarios s ON r.entidade_destino_id = s.pessoa_id AND r.tipo_destino_id = 1 AND s.tipo = 1\n    WHERE r.tipo_origem_id = 3\n),\nsocios_secundarios AS (\n    -- Pessoas e advogados relacionados às empresas secundárias\n    SELECT \n        r.entidade_destino_id AS pessoa_id,\n        r.tipo_destino_id AS tipo\n    FROM plataforma_stakeholders.relacionamentos r\n    JOIN empresas_secundarias e ON r.entidade_origem_id = e.empresa_id AND r.tipo_origem_id = 3\n    WHERE r.tipo_destino_id IN (1, 4)\n\n    UNION\n\n    SELECT \n        r.entidade_origem_id AS pessoa_id,\n        r.tipo_origem_id AS tipo\n    FROM plataforma_stakeholders.relacionamentos r\n    JOIN empresas_secundarias e ON r.entidade_destino_id = e.empresa_id AND r.tipo_destino_id = 3\n    WHERE r.tipo_origem_id IN (1, 4)\n),\nrelacionamentos_terciarios AS (\n    -- Pessoas/advogados conectados diretamente aos sócios primários (somente se o sócio primário for pessoa)\n    SELECT \n        r.entidade_destino_id AS pessoa_id,\n        r.tipo_destino_id AS tipo\n    FROM plataforma_stakeholders.relacionamentos r\n    JOIN socios_primarios s ON r.entidade_origem_id = s.pessoa_id AND s.tipo = 1 AND r.tipo_origem_id = 1\n    WHERE r.tipo_destino_id IN (1, 4)\n\n    UNION\n\n    SELECT \n        r.entidade_origem_id AS pessoa_id,\n        r.tipo_origem_id AS tipo\n    FROM plataforma_stakeholders.relacionamentos r\n    JOIN socios_primarios s ON r.entidade_destino_id = s.pessoa_id AND s.tipo = 1 AND r.tipo_destino_id = 1\n    WHERE r.tipo_origem_id IN (1, 4)\n),\ntodos_socios AS (\n    -- Junta todos os sócios primários, secundários e terciários\n    SELECT pessoa_id, tipo FROM socios_primarios\n    UNION\n    SELECT pessoa_id, tipo FROM socios_secundarios\n    UNION\n    SELECT pessoa_id, tipo FROM relacionamentos_terciarios\n)\nSELECT DISTINCT\n    CASE \n        WHEN t.tipo = 1 THEN p.firstname || ' ' || p.lastname\n        WHEN t.tipo = 4 THEN a.firstname || ' ' || a.lastname\n        ELSE NULL\n    END AS nome,\n    CASE \n        WHEN t.tipo = 1 THEN 'Pessoa'\n        WHEN t.tipo = 4 THEN 'Advogado'\n        ELSE NULL\n    END AS tipo,\n    t.pessoa_id AS id\nFROM todos_socios t\nLEFT JOIN plataforma_stakeholders.pessoa p ON t.tipo = 1 AND t.pessoa_id = p.pessoa_id\nLEFT JOIN plataforma_stakeholders.advogado a ON t.tipo = 4 AND t.pessoa_id = a.advogado_id\nWHERE (p.pessoa_id IS NOT NULL OR a.advogado_id IS NOT NULL)\nORDER BY tipo, nome;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[-3180,20],"id":"b95b1917-f2b6-47df-87c1-e953505ce20e","name":"Postgres1","credentials":{"postgres":{"id":"YNOTWNzTchEo0E2q","name":"Postgres account"}}},{"parameters":{"operation":"select","schema":{"__rl":true,"value":"plataforma_stakeholders","mode":"list","cachedResultName":"plataforma_stakeholders"},"table":{"__rl":true,"value":"pessoa","mode":"list","cachedResultName":"pessoa"},"where":{"values":[{"column":"pessoa_id","value":"={{ $json.id }}"}]},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[-2580,0],"id":"54ef61ed-382e-4015-97c9-7421d8033b8f","name":"Postgres3","credentials":{"postgres":{"id":"YNOTWNzTchEo0E2q","name":"Postgres account"}}},{"parameters":{"workflowId":{"__rl":true,"value":"USio4uRJbqJe9oSR","mode":"list","cachedResultName":"postStatus"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":false}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[-2920,-160],"id":"d2757625-938c-4c66-bd63-f3407629b8ad","name":"Execute Workflow2","executeOnce":true},{"parameters":{"assignments":{"assignments":[{"id":"03ab924a-7eaa-4fe7-9397-e79fcc0265bf","name":"status","value":"=Buscando {{ $('Postgres1').all().length}} perfis nos perfis encontrados","type":"string"},{"id":"899bda1b-621c-41fd-ad86-38f6b08bbaec","name":"body.node_id","value":"={{ $('When Executed by Another Workflow').item.json.body.node_id}}","type":"string"},{"id":"738f1f04-bb75-42e8-8134-80196fc39b4d","name":"body.node_type","value":"={{ $('When Executed by Another Workflow').item.json.body.node_type}}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-3020,-160],"id":"2a127e2a-664d-4013-9023-140b756963f1","name":"Status finalizado1"},{"parameters":{"mode":"chooseBranch","useDataOfInput":2},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[-2740,0],"id":"0173ba93-9fcb-4478-88a5-bd3861640b98","name":"Merge2"},{"parameters":{"workflowId":{"__rl":true,"value":"USio4uRJbqJe9oSR","mode":"list","cachedResultName":"postStatus"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":false}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[-2120,-140],"id":"cf3f560a-56c9-4d95-9640-cccc0f4f362e","name":"Execute Workflow","executeOnce":true},{"parameters":{"assignments":{"assignments":[{"id":"03ab924a-7eaa-4fe7-9397-e79fcc0265bf","name":"status","value":"=Encontrado {{ $('If2').all().length}} contas para varrer","type":"string"},{"id":"899bda1b-621c-41fd-ad86-38f6b08bbaec","name":"body.node_id","value":"={{ $('When Executed by Another Workflow').item.json.body.node_id}}","type":"string"},{"id":"738f1f04-bb75-42e8-8134-80196fc39b4d","name":"body.node_type","value":"={{ $('When Executed by Another Workflow').item.json.body.node_type}}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-2220,-140],"id":"4c90fbf1-ee28-4ec1-8504-9d5acdca0df0","name":"Status finalizado"},{"parameters":{"mode":"chooseBranch","useDataOfInput":2},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[-1880,-20],"id":"843d067f-5775-4988-903a-7def07027c47","name":"Merge"},{"parameters":{"workflowId":{"__rl":true,"value":"USio4uRJbqJe9oSR","mode":"list","cachedResultName":"postStatus"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":false}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[-1240,-180],"id":"dc969d2e-3b63-4e5e-b6b3-30f9d58bf620","name":"Execute Workflow3","executeOnce":true},{"parameters":{"assignments":{"assignments":[{"id":"03ab924a-7eaa-4fe7-9397-e79fcc0265bf","name":"status","value":"=Encontrado {{ $('If3').all().length}} não privado","type":"string"},{"id":"899bda1b-621c-41fd-ad86-38f6b08bbaec","name":"body.node_id","value":"={{ $('When Executed by Another Workflow').item.json.body.node_id}}","type":"string"},{"id":"738f1f04-bb75-42e8-8134-80196fc39b4d","name":"body.node_type","value":"={{ $('When Executed by Another Workflow').item.json.body.node_type}}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1340,-180],"id":"69bcf788-58b7-4ea1-9d4f-f9483942ab78","name":"Status finalizado2"},{"parameters":{"mode":"chooseBranch","useDataOfInput":2},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[-1080,-40],"id":"3a2e3fa2-f2b3-43ed-a777-69e7a0af900d","name":"Merge3"},{"parameters":{"workflowId":{"__rl":true,"value":"USio4uRJbqJe9oSR","mode":"list","cachedResultName":"postStatus"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":false}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[260,-200],"id":"c371c6d8-20f7-4f88-b228-24d313c8910f","name":"Execute Workflow1","executeOnce":true},{"parameters":{"assignments":{"assignments":[{"id":"03ab924a-7eaa-4fe7-9397-e79fcc0265bf","name":"status","value":"=Processando {{ $('Transforma todos em string para auxiliar o agente1').all().length }} batches de até 1000 perfis","type":"string"},{"id":"899bda1b-621c-41fd-ad86-38f6b08bbaec","name":"body.node_id","value":"={{ $('When Executed by Another Workflow').first().json.body.node_id}}","type":"string"},{"id":"738f1f04-bb75-42e8-8134-80196fc39b4d","name":"body.node_type","value":"={{ $('When Executed by Another Workflow').first().json.body.node_type}}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[160,-200],"id":"bfbf58b0-fc3d-4ec9-8e34-e4d76e6e8f93","name":"Status finalizado3"},{"parameters":{"mode":"chooseBranch","useDataOfInput":2},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[460,-60],"id":"2013b59f-0722-4602-924c-6ca79ff265b9","name":"Merge4"},{"parameters":{"workflowId":{"__rl":true,"value":"USio4uRJbqJe9oSR","mode":"list","cachedResultName":"postStatus"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":false}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1320,-240],"id":"23ed5dcf-ed20-4483-b2e9-a931ed88d7dd","name":"Execute Workflow4","executeOnce":true},{"parameters":{"assignments":{"assignments":[{"id":"03ab924a-7eaa-4fe7-9397-e79fcc0265bf","name":"status","value":"=Encontrado instagram das seguintes pessoas:\n{{ $('Code4').item.json.encontrados.pessoas.map(pessoa => `${pessoa.full_name}, username:  ${pessoa.username} \nJustificativa: ${pessoa.justificativa}`).join('\\n\\n') }}\n","type":"string"},{"id":"899bda1b-621c-41fd-ad86-38f6b08bbaec","name":"body.node_id","value":"={{ $('When Executed by Another Workflow').first().json.body.node_id}}","type":"string"},{"id":"738f1f04-bb75-42e8-8134-80196fc39b4d","name":"body.node_type","value":"={{ $('When Executed by Another Workflow').first().json.body.node_type}}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1220,-240],"id":"134f22b6-2bb6-4705-a568-73ba957ec2de","name":"Status finalizado4"},{"parameters":{"mode":"chooseBranch","useDataOfInput":2},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[1440,-80],"id":"d2b38868-1f84-4dd5-b304-7e379f039280","name":"Merge5"},{"parameters":{"workflowId":{"__rl":true,"value":"USio4uRJbqJe9oSR","mode":"list","cachedResultName":"postStatus"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":false}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2760,-120],"id":"1ebbd085-5e86-4340-a91e-98614a9bc587","name":"Execute Workflow5","executeOnce":true},{"parameters":{"assignments":{"assignments":[{"id":"03ab924a-7eaa-4fe7-9397-e79fcc0265bf","name":"status","value":"=Terminei a busca Profunda","type":"string"},{"id":"899bda1b-621c-41fd-ad86-38f6b08bbaec","name":"body.node_id","value":"={{ $('When Executed by Another Workflow').first().json.body.node_id}}","type":"string"},{"id":"738f1f04-bb75-42e8-8134-80196fc39b4d","name":"body.node_type","value":"={{ $('When Executed by Another Workflow').first().json.body.node_type}}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2660,-120],"id":"ecfc8f75-d49a-4724-9989-337b008edc6b","name":"Status finalizado5"}],"connections":{"HTTP Request":{"main":[[{"node":"Code6","type":"main","index":0}]]},"Seguidores1":{"main":[[{"node":"Code","type":"main","index":0}]]},"Busca ID1":{"main":[[{"node":"If3","type":"main","index":0}]]},"Transforma todos em string para auxiliar o agente1":{"main":[[{"node":"Status finalizado3","type":"main","index":0},{"node":"Merge4","type":"main","index":1}]]},"Merge9":{"main":[[{"node":"Transforma todos em string para auxiliar o agente1","type":"main","index":0}]]},"Code":{"main":[[{"node":"Merge9","type":"main","index":0}]]},"Code6":{"main":[[{"node":"Merge9","type":"main","index":1}]]},"AI Agent":{"main":[[{"node":"Code4","type":"main","index":0}]]},"Google Gemini Chat Model1":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"Structured Output Parser":{"ai_outputParser":[[{"node":"AI Agent","type":"ai_outputParser","index":0}]]},"Postgres2":{"main":[[{"node":"Merge1","type":"main","index":0}]]},"Code4":{"main":[[{"node":"Merge5","type":"main","index":1},{"node":"Status finalizado4","type":"main","index":0}]]},"Pessoas Encontradas":{"main":[[{"node":"Postgres2","type":"main","index":0}]]},"Advogados encontrados":{"main":[[{"node":"Postgre Advogado","type":"main","index":0}]]},"Postgre Advogado":{"main":[[{"node":"Merge1","type":"main","index":1}]]},"If":{"main":[[{"node":"Advogados encontrados","type":"main","index":0}],[{"node":"Merge1","type":"main","index":1}]]},"If1":{"main":[[{"node":"Pessoas Encontradas","type":"main","index":0}],[{"node":"Merge1","type":"main","index":0}]]},"If2":{"main":[[{"node":"Status finalizado","type":"main","index":0},{"node":"Merge","type":"main","index":1}],[]]},"If3":{"main":[[{"node":"Status finalizado2","type":"main","index":0},{"node":"Merge3","type":"main","index":1}]]},"Merge1":{"main":[[{"node":"Status finalizado5","type":"main","index":0}]]},"When Executed by Another Workflow":{"main":[[{"node":"Postgres1","type":"main","index":0}]]},"Postgres1":{"main":[[{"node":"Status finalizado1","type":"main","index":0},{"node":"Merge2","type":"main","index":1}]]},"Postgres3":{"main":[[{"node":"If2","type":"main","index":0}]]},"Execute Workflow2":{"main":[[{"node":"Merge2","type":"main","index":0}]]},"Status finalizado1":{"main":[[{"node":"Execute Workflow2","type":"main","index":0}]]},"Merge2":{"main":[[{"node":"Postgres3","type":"main","index":0}]]},"Execute Workflow":{"main":[[{"node":"Merge","type":"main","index":0}]]},"Status finalizado":{"main":[[{"node":"Execute Workflow","type":"main","index":0}]]},"Merge":{"main":[[{"node":"Busca ID1","type":"main","index":0}]]},"Execute Workflow3":{"main":[[{"node":"Merge3","type":"main","index":0}]]},"Status finalizado2":{"main":[[{"node":"Execute Workflow3","type":"main","index":0}]]},"Merge3":{"main":[[{"node":"Seguidores1","type":"main","index":0},{"node":"HTTP Request","type":"main","index":0}]]},"Execute Workflow1":{"main":[[{"node":"Merge4","type":"main","index":0}]]},"Status finalizado3":{"main":[[{"node":"Execute Workflow1","type":"main","index":0}]]},"Merge4":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"Execute Workflow4":{"main":[[{"node":"Merge5","type":"main","index":0}]]},"Status finalizado4":{"main":[[{"node":"Execute Workflow4","type":"main","index":0}]]},"Merge5":{"main":[[{"node":"If1","type":"main","index":0},{"node":"If","type":"main","index":0}]]},"Status finalizado5":{"main":[[{"node":"Execute Workflow5","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"When Executed by Another Workflow":[{"json":{"headers":{"host":"n8n-automacao-production.up.railway.app","user-agent":"python-requests/2.32.4","content-length":"899","accept":"*/*","accept-encoding":"gzip, deflate, zstd","content-type":"application/json","x-forwarded-for":"189.100.70.129","x-forwarded-host":"n8n-automacao-production.up.railway.app","x-forwarded-proto":"https","x-railway-edge":"railway/us-east4","x-railway-request-id":"PDLSOFFnTKOrkIVMueLfZA","x-real-ip":"189.100.70.129","x-request-start":"1750174909286"},"params":{},"query":{},"body":{"node_id":"12295","node_type":"Empresa","documento":"05607032000173","nome":"MPN EMPREENDIMENTOS LTDA","instagram":"mpnempreendimentos","properties":{"porte_id":5,"situacao_cadastral":"02","ramo":"4120400","nome_fantasia":"MPN EMPREENDIMENTOS","segmento_id":null,"quantidade_funcionarios":null,"tipo_empresa":null,"linkedin":null,"codigo_natureza_juridica":null,"ultima_atualizacao_pj":"20030407","cnpj":"05607032000173","instagram":"mpnempreendimentos","natureza_juridica_descricao":"2062","natureza_juridica_tipo":null,"razao_social":"MPN EMPREENDIMENTOS LTDA","stakeholder":true,"faixa_funcionarios":null,"projeto_id":15,"empresa_id":12295,"em_prospecao":false,"faixa_faturamento":null,"matriz":true,"orgao_publico":null,"data_fundacao":"20030407","projeto_nome":"Bracell - Civil Bahia","community_id":145,"tipo_no":"stakeholder"}},"webhookUrl":"https://n8n-automacao-production.up.railway.app/webhook/buscar_profundo","executionMode":"production"}}]},"versionId":"588670b1-1251-4d20-8459-38b8a7c7d88d","triggerCount":1,"tags":[]}